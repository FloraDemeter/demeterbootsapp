-- Customer

-- Function to delete a record from Customer
CREATE OR REPLACE FUNCTION demeterboots.Customer_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Customer c WHERE c.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Customer
CREATE OR REPLACE FUNCTION demeterboots.Customer_Commit(p_id VARCHAR, firstname VARCHAR, lastname VARCHAR, street VARCHAR, postcode VARCHAR, city VARCHAR, email VARCHAR, phonenumber VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Customer (FirstName, LastName, Street, PostCode, City, Email, PhoneNumber) 
        VALUES (firstname, lastname, street, postcode, city, email, phonenumber);
    ELSE
        UPDATE demeterboots.Customer c
        SET c.FirstName = firstname, c.LastName = lastname, c.Street = street, c.PostCode = postcode, c.City = city, c.Email = email, c.PhoneNumber = phonenumber 
        WHERE c.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Customer
CREATE OR REPLACE FUNCTION demeterboots.Customer_Details(p_id VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, firstname VARCHAR, lastname VARCHAR, street VARCHAR, postcode VARCHAR, city VARCHAR, email VARCHAR, phonenumber VARCHAR) AS $$
BEGIN
    IF p_id IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Customer;
    ELSE
        RETURN QUERY SELECT * FROM demeterboots.Customer c WHERE c.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Measurements

-- Function to delete a record from Measurements
CREATE OR REPLACE FUNCTION demeterboots.Measurements_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Measurements m WHERE m.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Measurements
CREATE OR REPLACE FUNCTION demeterboots.Measurements_Commit(p_id VARCHAR, customerid VARCHAR, date DATE, notes VARCHAR, feet DECIMAL, bunion DECIMAL, highpoint DECIMAL, heel DECIMAL, ankle DECIMAL, calf DECIMAL, underknee DECIMAL, height DECIMAL, calfheight DECIMAL, tmark DECIMAL, imagepath VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Measurements (CustomerID, Date, Notes, Feet, Bunion, HighPoint, Heel, Ankle, Calf, UnderKnee, Height, CalfHeight, TMark, ImagePath) 
        VALUES (customerid, date, notes, feet, bunion, highpoint, heel, ankle, calf, underknee, height, calfheight, tmark, imagepath);
    ELSE
        UPDATE demeterboots.Measurements m
        SET m.CustomerID = customerid, m.Date = date, m.Notes = notes, m.Feet = feet, m.Bunion = bunion, m.HighPoint = highpoint, m.Heel = heel, m.Ankle = ankle, m.Calf = calf, m.UnderKnee = underknee, m.Height = height, m.CalfHeight = calfheight, m.TMark = tmark, m.ImagePath = imagepath 
        WHERE m.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Measurements
CREATE OR REPLACE FUNCTION demeterboots.Measurements_Details(p_id VARCHAR DEFAULT NULL, p_customerid VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, customerid VARCHAR, date DATE, notes VARCHAR, feet DECIMAL, bunion DECIMAL, highpoint DECIMAL, heel DECIMAL, ankle DECIMAL, calf DECIMAL, underknee DECIMAL, height DECIMAL, calfheight DECIMAL, tmark DECIMAL, imagepath VARCHAR) AS $$
BEGIN
    IF p_id IS NULL AND p_customerid IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Measurements;

    ELSIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Measurements WHERE ID = p_id;
    
    ELSIF p_customerid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Measurements m WHERE m.CustomerID = p_customerid;
    
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Employee

-- Function to delete a record from Employee
CREATE OR REPLACE FUNCTION demeterboots.Employee_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Employee e WHERE e.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Employee
CREATE OR REPLACE FUNCTION demeterboots.Employee_Commit(p_id VARCHAR, firstname VARCHAR, lastname VARCHAR, street VARCHAR, postcode VARCHAR, city VARCHAR, email VARCHAR, phonenumber VARCHAR, username VARCHAR, password VARCHAR, isactive BOOL, accesslevel INT, startdate DATE, enddate DATE)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Employee (FirstName, LastName, Street, PostCode, City, Email, PhoneNumber, Username, Password, IsActive, AccessLevel, StartDate, EndDate) 
        VALUES (firstname, lastname, street, postcode, city, email, phonenumber, username, password, isactive, accesslevel, startdate, enddate);
    ELSE
        UPDATE demeterboots.Employee e
        SET e.FirstName = firstname, e.LastName = lastname, e.Street = street, e.PostCode = postcode, e.City = city, e.Email = email, e.PhoneNumber = phonenumber, e.Username = username, e.Password = password, e.IsActive = isactive, e.AccessLevel = accesslevel, e.StartDate = startdate, e.EndDate = enddate 
        WHERE e.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Employee
CREATE OR REPLACE FUNCTION demeterboots.Employee_Details(p_id VARCHAR DEFAULT NULL, p_username VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, firstname VARCHAR, lastname VARCHAR, street VARCHAR, postcode VARCHAR, city VARCHAR, email VARCHAR, phonenumber VARCHAR, username VARCHAR, password VARCHAR, isactive BOOL, accesslevel INT, startdate DATE, enddate DATE) AS $$
BEGIN
    IF p_id IS NULL AND p_username IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Employee;

    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Employee e WHERE e.ID = p_id;

    ELSEIF p_username IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Employee e WHERE e.Username = p_username;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Orders

-- Function to delete a record from Orders
CREATE OR REPLACE FUNCTION demeterboots.Order_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Orders o WHERE o.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Orders
CREATE OR REPLACE FUNCTION demeterboots.Order_Commit(p_id VARCHAR, customerid VARCHAR, date DATE, predictedfinish DATE, location VARCHAR, total NUMERIC, iswarrantyaccepted BOOL, status INT)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Orders (CustomerID, Date, PredictedFinish, Location, Total, IsWarrantyAccepted, Status) VALUES (customerid, date, predictedfinish, location, total, iswarrantyaccepted, status);
    ELSE
        UPDATE demeterboots.Orders o SET o.CustomerID = customerid, o.Date = date, o.PredictedFinish = predictedfinish, o.Location = location, o.Total = total, o.IsWarrantyAccepted = iswarrantyaccepted, o.Status = status WHERE o.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Orders
CREATE OR REPLACE FUNCTION demeterboots.Order_Details(p_id VARCHAR DEFAULT NULL, p_customerid VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, customerid VARCHAR, date DATE, predictedfinish DATE, location VARCHAR, total NUMERIC, iswarrantyaccepted BOOL, status INT) AS $$
BEGIN
    IF p_id IS NULL AND p_customerid IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Orders;

    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Orders o WHERE o.ID = p_id;

    ELSEIF p_customerid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Orders o WHERE o.CustomerID = p_customerid;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- OrderLine

-- Function to delete a record from OrderLine
CREATE OR REPLACE FUNCTION demeterboots.OrderLine_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.OrderLine o WHERE o.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in OrderLine
CREATE OR REPLACE FUNCTION demeterboots.OrderLine_Commit(p_id VARCHAR, orderid VARCHAR, producttypeid INT, leatherid INT, productstyle JSONB, price NUMERIC, notes VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.OrderLine (OrderID, ProductTypeID, LeatherID, ProductStyle, Price, Notes) VALUES (orderid, producttypeid, leatherid, productstyle, price, notes);
    ELSE
        UPDATE demeterboots.OrderLine o SET o.OrderID = orderid, o.ProductTypeID = producttypeid, o.LeatherID = leatherid, o.ProductStyle = productstyle, o.Price = price, o.Notes = notes WHERE o.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from OrderLine
CREATE OR REPLACE FUNCTION demeterboots.OrderLine_Details(p_id VARCHAR DEFAULT NULL, p_orderid VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, orderid VARCHAR, producttypeid INT, leatherid INT, productstyle JSONB, price NUMERIC, notes VARCHAR) AS $$
BEGIN
    IF p_id IS NULL AND p_orderid IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.OrderLine;

    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.OrderLine o WHERE o.ID = p_id;

    ELSEIF p_orderid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.OrderLine o WHERE o.OrderID = p_orderid;

    END IF;
END;
$$ LANGUAGE plpgsql;

-- Repair

-- Function to delete a record from Repair
CREATE OR REPLACE FUNCTION demeterboots.Repair_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Repair r WHERE r.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Repair
CREATE OR REPLACE FUNCTION demeterboots.Repair_Commit(p_id VARCHAR, customerid VARCHAR, date DATE, predictedfinish DATE, location VARCHAR, total NUMERIC, iswarrantyaccepted BOOL, status INT)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Repair (CustomerID, Date, PredictedFinish, Location, Total, IsWarrantyAccepted, Status) VALUES (customerid, date, predictedfinish, location, total, iswarrantyaccepted, status);
    ELSE
        UPDATE demeterboots.Repair r SET r.CustomerID = customerid, r.Date = date, r.PredictedFinish = predictedfinish, r.Location = location, r.Total = total, r.IsWarrantyAccepted = iswarrantyaccepted, r.Status = status WHERE r.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Repair
CREATE OR REPLACE FUNCTION demeterboots.Repair_Details(p_id VARCHAR DEFAULT NULL, p_customerid VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, customerid VARCHAR, date DATE, predictedfinish DATE, location VARCHAR, total NUMERIC, iswarrantyaccepted BOOL, status INT) AS $$
BEGIN
    IF p_id IS NULL AND p_customerid IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Repair;

    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Repair r WHERE r.ID = p_id;

    ELSEIF p_customerid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Repair r WHERE r.CustomerID = p_customerid;

    END IF;
END;
$$ LANGUAGE plpgsql;

-- RepairLine

-- Function to delete a record from RepairLine
CREATE OR REPLACE FUNCTION demeterboots.RepairLine_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.RepairLine r WHERE ID = r.p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in RepairLine
CREATE OR REPLACE FUNCTION demeterboots.RepairLine_Commit(p_id VARCHAR, repairid VARCHAR, repaircategoryid INT, price NUMERIC, notes VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.RepairLine (RepairID, RepairCategoryID, Price, Notes) VALUES (repairid, repaircategoryid, price, notes);
    ELSE
        UPDATE demeterboots.RepairLine r SET r.RepairID = repairid, r.RepairCategoryID = repaircategoryid, r.Price = price, r.Notes = notes WHERE r.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from RepairLine
CREATE OR REPLACE FUNCTION demeterboots.RepairLine_Details(p_id VARCHAR DEFAULT NULL, p_repairid VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, repairid VARCHAR, repaircategoryid INT, price NUMERIC, notes VARCHAR) AS $$
BEGIN
    IF p_id IS NULL AND p_repairID IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.RepairLine;

    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.RepairLine r WHERE r.ID = p_id;

    ELSEIF p_repairid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.RepairLine r WHERE r.RepairID = p_repairid;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Invoice

-- Function to delete a record from Invoice
CREATE OR REPLACE FUNCTION demeterboots.Invoice_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Invoice i WHERE i.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Invoice
CREATE OR REPLACE FUNCTION demeterboots.Invoice_Commit(p_id VARCHAR, customerid VARCHAR, status INT, paymenttype INT, total NUMERIC, date DATE, paymentdate DATE, ispaid BOOL)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Invoice (CustomerID, Status, PaymentType, Total, Date, PaymentDate, IsPaid) VALUES (customerid, status, paymenttype, total, date, paymentdate, ispaid);
    ELSE
        UPDATE demeterboots.Invoice i SET i.CustomerID = customerid, i.Status = status, i.PaymentType = paymenttype, i.Total = total, i.Date = date, i.PaymentDate = paymentdate, i.IsPaid = ispaid WHERE i.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Invoice
CREATE OR REPLACE FUNCTION demeterboots.Invoice_Details(p_id VARCHAR DEFAULT NULL, p_customerid VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, customerid VARCHAR, status INT, paymenttype INT, total NUMERIC, date DATE, paymentdate DATE, ispaid BOOL) AS $$
BEGIN
    IF p_id IS NULL And p_customerid IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Invoice;
    
    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Invoice i WHERE i.ID = p_id;

    ELSEIF p_customerid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Invoice i WHERE i.CustomerID = p_customerid;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- InvoiceLine

-- Function to delete a record from InvoiceLine
CREATE OR REPLACE FUNCTION demeterboots.InvoiceLine_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.InvoiceLine i WHERE i.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in InvoiceLine
CREATE OR REPLACE FUNCTION demeterboots.InvoiceLine_Commit(p_id VARCHAR, invoiceid VARCHAR, taskid VARCHAR, tasktype VARCHAR, total NUMERIC)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.InvoiceLine (InvoiceID, TaskID, TaskType, Total) VALUES (invoiceid, taskid, tasktype, total);
    ELSE
        UPDATE demeterboots.InvoiceLine i SET i.InvoiceID = invoiceid, i.TaskID = taskid, i.TaskType = tasktype, i.Total = total WHERE i.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from InvoiceLine
CREATE OR REPLACE FUNCTION demeterboots.InvoiceLine_Details(p_id VARCHAR DEFAULT NULL, p_invoiceid VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, invoiceid VARCHAR, taskid VARCHAR, tasktype VARCHAR, total NUMERIC) AS $$
BEGIN
    IF p_id IS NULL AND p_invoiceID IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.InvoiceLine;
    
    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.InvoiceLine i WHERE i.ID = p_id;
    
    ELSEIF p_invoiceid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.InvoiceLine i WHERE i.InvoiceID = p_invoiceid;
    
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Job

-- Function to delete a record from Job
CREATE OR REPLACE FUNCTION demeterboots.Job_Delete(p_id VARCHAR)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Job j WHERE j.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Job
CREATE OR REPLACE FUNCTION demeterboots.Job_Commit(p_id VARCHAR, employeeid VARCHAR, status INT, taskid VARCHAR, tasktype VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Job (EmployeeID, Status, TaskID, TaskType) VALUES (employeeid, status, taskid, tasktype);
    ELSE
        UPDATE demeterboots.Job j SET j.EmployeeID = employeeid, j.Status = status, j.TaskID = taskid, j.TaskType = tasktype WHERE j.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Job
CREATE OR REPLACE FUNCTION demeterboots.Job_Details(p_id VARCHAR DEFAULT NULL, p_employeeid VARCHAR DEFAULT NULL)
RETURNS TABLE (id VARCHAR, employeeid VARCHAR, status INT, taskid VARCHAR, tasktype VARCHAR) AS $$
BEGIN
    IF p_id IS NULL AND p_employeeid IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Job;

    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Job j WHERE j.ID = p_id;
        
    ELSEIF p_employeeid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Job j WHERE j.EmployeeID = p_employeeid;

    END IF;
END;
$$ LANGUAGE plpgsql;

-- JobNotification

-- Function to delete a record from JobNotification
CREATE OR REPLACE FUNCTION demeterboots.JobNotification_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.JobNotification j WHERE j.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in JobNotification
CREATE OR REPLACE FUNCTION demeterboots.JobNotification_Commit(p_id INT, previousemployeeid VARCHAR, newemployeeid VARCHAR, isnotified BOOL, taskid VARCHAR, tasktype VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.JobNotification (PreviousEmployeeID, NewEmployeeID, IsNotified, TaskID, TaskType) VALUES (previousemployeeid, newemployeeid, isnotified, taskid, tasktype);
    ELSE
        UPDATE demeterboots.JobNotification j SET j.PreviousEmployeeID = previousemployeeid, j.NewEmployeeID = newemployeeid, j.IsNotified = isnotified, j.TaskID = taskid, j.TaskType = tasktype WHERE j.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from JobNotification
CREATE OR REPLACE FUNCTION demeterboots.JobNotification_Details(p_id INT DEFAULT NULL)
RETURNS TABLE (id INT, previousemployeeid VARCHAR, newemployeeid VARCHAR, isnotified BOOL, taskid VARCHAR, tasktype VARCHAR) AS $$
BEGIN
    IF p_id IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.JobNotification;
    ELSE
        RETURN QUERY SELECT * FROM demeterboots.JobNotification j WHERE j.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records where the Job has not been notified
CREATE OR REPLACE FUNCTION demeterboots.JobNotification_NotNotified(p_employeeid VARCHAR)
RETURNS TABLE (id INT, previousemployeeid VARCHAR, newemployeeid VARCHAR, isnotified BOOL, taskid VARCHAR, tasktype VARCHAR) AS $$
BEGIN
    RETURN QUERY SELECT * FROM demeterboots.JobNotification j WHERE j.IsNotified = FALSE AND j.NewEmployeeID = p_employeeid;
END;
$$ LANGUAGE plpgsql;

-- ProductType

-- Function to delete a record from ProductType
CREATE OR REPLACE FUNCTION demeterboots.ProductType_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.ProductType p WHERE p.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in ProductType
CREATE OR REPLACE FUNCTION demeterboots.ProductType_Commit(p_id INT, description VARCHAR, price NUMERIC)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.ProductType (Description, Price) VALUES (description, price);
    ELSE
        UPDATE demeterboots.ProductType p SET p.Description = description, p.Price = price WHERE p.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from ProductType
CREATE OR REPLACE FUNCTION demeterboots.ProductType_Details(p_id INT DEFAULT NULL)
RETURNS TABLE (id INT, description VARCHAR, price NUMERIC) AS $$
BEGIN
    IF p_id IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.ProductType;
    ELSE
        RETURN QUERY SELECT * FROM demeterboots.ProductType p WHERE p.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- ProductStyle

-- Function to delete a record from ProductStyle
CREATE OR REPLACE FUNCTION demeterboots.ProductStyle_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.ProductStyle p WHERE p.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in ProductStyle
CREATE OR REPLACE FUNCTION demeterboots.ProductStyle_Commit(p_id INT, productstyletypeid INT, description VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.ProductStyle (ProductStyleTypeID, Description) VALUES (productstyletypeid, description);
    ELSE
        UPDATE demeterboots.ProductStyle p SET p.ProductStyleTypeID = productstyletypeid, p.Description = description WHERE p.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from ProductStyle
CREATE OR REPLACE FUNCTION demeterboots.ProductStyle_Details(p_id INT DEFAULT NULL, p_productstyletypeid INT DEFAULT NULL)
RETURNS TABLE (id INT, productstyletypeid INT, description VARCHAR) AS $$
BEGIN
    IF p_id IS NULL AND p_productstyletypeid IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.ProductStyle;
    
    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.ProductStyle p WHERE p.ID = p_id;

    ELSEIF p_productstyletypeid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.ProductStyle p WHERE p.ProductStyleTypeID = p_productstyletypeid;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- ProductStyleType

-- Function to delete a record from ProductStyleType
CREATE OR REPLACE FUNCTION demeterboots.ProductStyleType_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.ProductStyleType p WHERE p.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in ProductStyleType
CREATE OR REPLACE FUNCTION demeterboots.ProductStyleType_Commit(p_id INT, description VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.ProductStyleType (Description) VALUES (description);
    ELSE
        UPDATE demeterboots.ProductStyleType p SET p.Description = description WHERE p.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from ProductStyleType
CREATE OR REPLACE FUNCTION demeterboots.ProductStyleType_Details(p_id INT DEFAULT NULL)
RETURNS TABLE (id INT, description VARCHAR) AS $$
BEGIN
    IF p_id IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.ProductStyleType;
    ELSE
        RETURN QUERY SELECT * FROM demeterboots.ProductStyleType p WHERE p.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- RepairCategory

-- Function to delete a record from RepairCategory
CREATE OR REPLACE FUNCTION demeterboots.RepairCategory_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.RepairCategory r WHERE r.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in RepairCategory
CREATE OR REPLACE FUNCTION demeterboots.RepairCategory_Commit(p_id INT, producttypeid INT, description VARCHAR, price NUMERIC)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.RepairCategory (ProductTypeID, Description, Price) VALUES (producttypeid, description, price);
    ELSE
        UPDATE demeterboots.RepairCategory r SET r.ProductTypeID = producttypeid, r.Description = description, r.Price = price WHERE r.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from RepairCategory
CREATE OR REPLACE FUNCTION demeterboots.RepairCategory_Details(p_id INT DEFAULT NULL, p_producttypeid INT DEFAULT NULL)
RETURNS TABLE (id INT, producttypeid INT, description VARCHAR, price NUMERIC) AS $$
BEGIN
    IF p_id IS NULL AND p_producttypeid IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.RepairCategory;

    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.RepairCategory r WHERE r.ID = p_id;

    ELSEIF p_producttypeid IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.RepairCategory r WHERE r.ProductTypeID = p_producttypeid;

    END IF;
END;
$$ LANGUAGE plpgsql;

-- Leather

-- Function to delete a record from Leather
CREATE OR REPLACE FUNCTION demeterboots.Leather_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Leather l WHERE l.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Leather
CREATE OR REPLACE FUNCTION demeterboots.Leather_Commit(p_id INT, colour VARCHAR, description VARCHAR, imagepath VARCHAR, isavailable BOOL)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Leather (Colour, Description, ImagePath, IsAvailable) VALUES (colour, description, imagepath, isavailable);
    ELSE
        UPDATE demeterboots.Leather l SET l.Colour = colour, l.Description = description, l.ImagePath = imagepath, l.IsAvailable = isavailable WHERE l.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Leather
CREATE OR REPLACE FUNCTION demeterboots.Leather_Details(p_id INT DEFAULT NULL, p_isavailable BOOL DEFAULT NULL)
RETURNS TABLE (id INT, colour VARCHAR, description VARCHAR, imagepath VARCHAR, isavailable BOOL) AS $$
BEGIN
    IF p_id IS NULL AND p_isavailable IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Leather;

    ELSEIF p_id IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Leather l WHERE l.ID = p_id;

    ELSEIF p_isavailable IS NOT NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Leather l WHERE l.IsAvailable = p_isavailable;

    END IF;
END;
$$ LANGUAGE plpgsql;

-- Status

-- Function to delete a record from Status
CREATE OR REPLACE FUNCTION demeterboots.Status_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.Status s WHERE s.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in Status
CREATE OR REPLACE FUNCTION demeterboots.Status_Commit(p_id INT, description VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.Status (Description) VALUES (description);
    ELSE
        UPDATE demeterboots.Status s SET s.Description = description WHERE s.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from Status
CREATE OR REPLACE FUNCTION demeterboots.Status_Details(p_id INT DEFAULT NULL)
RETURNS TABLE (id INT, description VARCHAR) AS $$
BEGIN
    IF p_id IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.Status;
    ELSE
        RETURN QUERY SELECT * FROM demeterboots.Status s WHERE s.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- AccessLevel

-- Function to delete a record from AccessLevel
CREATE OR REPLACE FUNCTION demeterboots.AccessLevel_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.AccessLevel a WHERE a.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in AccessLevel
CREATE OR REPLACE FUNCTION demeterboots.AccessLevel_Commit(p_id INT, description VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.AccessLevel (Description) VALUES (description);
    ELSE
        UPDATE demeterboots.AccessLevel a SET a.Description = description WHERE a.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from AccessLevel
CREATE OR REPLACE FUNCTION demeterboots.AccessLevel_Details(p_id INT DEFAULT NULL)
RETURNS TABLE (id INT, description VARCHAR) AS $$
BEGIN
    IF p_id IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.AccessLevel;
    ELSE
        RETURN QUERY SELECT * FROM demeterboots.AccessLevel a WHERE a.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- PaymentType

-- Function to delete a record from PaymentType
CREATE OR REPLACE FUNCTION demeterboots.PaymentType_Delete(p_id INT)
RETURNS VOID AS $$
BEGIN
    DELETE FROM demeterboots.PaymentType p WHERE p.ID = p_id;
END;
$$ LANGUAGE plpgsql;

-- Function to insert or update a record in PaymentType
CREATE OR REPLACE FUNCTION demeterboots.PaymentType_Commit(p_id INT, description VARCHAR)
RETURNS VOID AS $$
BEGIN
    IF p_id IS NULL THEN
        INSERT INTO demeterboots.PaymentType (Description) VALUES (description);
    ELSE
        UPDATE demeterboots.PaymentType p SET p.Description = description WHERE p.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to select records from PaymentType
CREATE OR REPLACE FUNCTION demeterboots.PaymentType_Details(p_id INT DEFAULT NULL)
RETURNS TABLE (id INT, description VARCHAR) AS $$
BEGIN
    IF p_id IS NULL THEN
        RETURN QUERY SELECT * FROM demeterboots.PaymentType;
    ELSE
        RETURN QUERY SELECT * FROM demeterboots.PaymentType p WHERE p.ID = p_id;
    END IF;
END;
$$ LANGUAGE plpgsql;